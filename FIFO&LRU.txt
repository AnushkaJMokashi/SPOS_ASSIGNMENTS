import java.util.HashSet;
import java.util.LinkedList;
import java.util.Queue;

class FIFO {
    static int pageFaults(int pages[], int capacity) {
        HashSet<Integer> s = new HashSet<>(capacity);
        Queue<Integer> indexes = new LinkedList<>();
        int page_faults = 0;

        for (int i = 0; i < pages.length; i++) {
            if (s.size() < capacity) {
                if (!s.contains(pages[i])) {
                    s.add(pages[i]);
                    page_faults++;
                    indexes.add(pages[i]);
                }
            } else {
                if (!s.contains(pages[i])) {
                    int val = indexes.peek();
                    indexes.poll();
                    s.remove(val);
                    s.add(pages[i]);
                    indexes.add(pages[i]);
                    page_faults++;
                }
            }
            System.out.println("Step " + (i + 1) + ": Page " + pages[i] + " -> Page Faults: " + page_faults);
            System.out.println("Queue: " + indexes);
        }

        return page_faults;
    }

}

//============================================================
import java.util.ArrayList;

class LRU{
	public static int LRU_algo(int arr[] ,int n, int capacity){
		
		ArrayList <Integer> s = new ArrayList<>(capacity);
		int count= 0;
		int page_faults = 0;
		
		for(int i : arr) {
			
			if(!s.contains(i)) {
				
				if(s.size() == capacity) {
					int removedpage = s.get(0);
					s.remove(0);
					s.add(capacity-1, i);
					System.out.println("Page "+removedpage+" removed. "+"Page " +i + " Added. "+ " Memory: "+s + "    ==Page Fault==    ");
				}
				else {
					s.add(count,i);
					System.out.println("Page " +i + " Added. "+ " Memory: "+s + "    ==Page Fault==    ");
					
				}
				
				page_faults++;
				count++;
				
			}else {
				s.remove((Object)i);
				s.add(s.size(), i );
				System.out.println("Page "+i+" is already in Memory. "+"Memory: "+s+ "    ==Page Hit==   ");
				
			}
		}
		
		System.out.println("Total Page Faults : "+page_faults);
		
		return page_faults;
		
		
	}
}
