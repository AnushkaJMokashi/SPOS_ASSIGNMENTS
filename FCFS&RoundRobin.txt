import java.util.Scanner;

public class FCFS {
	
	public void FCFS_algo() {
		
		Scanner sc = new Scanner(System.in);
		int n;
		System.out.println("Enter the no. of processes: ");
		n = sc.nextInt();
		
		int pid[] = new int[n];
		int at[] = new int[n];
		int bt[] = new int[n];
		int ct[] = new int[n];
		int tat[] = new int[n];
		int wt[] = new int[n];
		
		int avgtat = 0;
		int avgwt = 0;
		//accept pid , at, bt
		
		for(int i = 0 ; i < n ; i++) {
			System.out.println("Process : "+ (i+1));
			System.out.print("AT : ");
			at[i] = sc.nextInt();
			System.out.println("BT : ");
			bt[i] = sc.nextInt();
		}
		
		int temp = 0;
		//sort according to the AT
		for(int i = 0 ; i<n ; i++) {
			for(int j  = 0 ; j<n-(i+1) ; j++) {
				if(at[j] > at[j+1]) {
					
					temp = at[j];
					at[j] = at[j+1];
					at[j+1] = temp;
					
					temp = bt[j];
					bt[j] = bt[j+1];
					bt[j+1] = temp;
					
					temp = pid[j];
					pid[j] = pid[j+1];
					pid[j+1] = temp;
					
				}
			}
			
		}
		
		
		//CT
		for(int i = 0 ; i< n ; i++) {
			if(i == 0) {
				ct[i] = at[i] + bt[i];
			}
			else {
				if(at[i] > ct[i-1]) {
					ct[i] = at[i] + bt[i];
				}
				else {
					ct[i] = ct[i-1] + bt[i];
				}
			}
			
			tat[i] = ct[i] - at[i];
			wt[i] = tat[i] - bt[i];
			
			avgtat += tat[i];
			avgwt += wt[i];
			
		}
		
		//print
		
		System.out.println("/n Process Id \tAT \tBT \tCT \tTAT \tWT");
		for(int i = 0 ; i < n ; i++) {
			System.out.println(pid[i]+ "\t\t\t" + at[i] + "\t\t\t" + bt[i] + "\t\t\t" + ct[i] + "\t\t\t" + tat[i] + "\t\t\t" + wt[i] +"\n");
		}
		
		System.out.println("AVG TAT: "+avgtat/n);
		System.out.println("AVG WT: "+avgwt/n);
		
		
		
	}
	public static void main(String[] args) {
		FCFS f = new FCFS();
		f.FCFS_algo();

	}

}
//========================================================================


public class RoundRobin 
{
    
    static void findWaitingTime(int processes[], int n,
                 int bt[], int wt[], int quantum)
    {
        
        int rem_bt[] = new int[n];
        for (int i = 0 ; i < n ; i++)
            rem_bt[i] =  bt[i];
      
        int t = 0; 
        while(true)
        {
            boolean done = true;
      
            
            for (int i = 0 ; i < n; i++)
            {
                if (rem_bt[i] > 0)
                {
                    done = false; 
      
                    if (rem_bt[i] > quantum)
                    {
                        
                        t += quantum;
                        rem_bt[i] -= quantum;
                    }
      
                    else
                    {
                        
                        t = t + rem_bt[i];
      
                        
                        wt[i] = t - bt[i];
      
                        
                        rem_bt[i] = 0;
                    }
                }
            }
      
            if (done == true)
              break;
        }
    }
      

    static void findTurnAroundTime(int processes[], int n,
                            int bt[], int wt[], int tat[])
    {
        
        for (int i = 0; i < n ; i++)
            tat[i] = bt[i] + wt[i];
    }
      
    
    static void findavgTime(int processes[], int n, int bt[],
                                         int quantum)
    {
        int wt[] = new int[n], tat[] = new int[n];
        int total_wt = 0, total_tat = 0;
      
        
        findWaitingTime(processes, n, bt, wt, quantum);
      
        
        findTurnAroundTime(processes, n, bt, wt, tat);
      
        
        System.out.println("PN " + " B " +
                      " WT " + " TAT");
      
       
        for (int i=0; i<n; i++)
        {
            total_wt = total_wt + wt[i];
            total_tat = total_tat + tat[i];
            System.out.println(" " + (i+1) + "\t\t" + bt[i] +"\t " +
                              wt[i] +"\t\t " + tat[i]);
        }
      
        System.out.println("Average waiting time = " +
                          (float)total_wt / (float)n);
        System.out.println("Average turn around time = " +
                           (float)total_tat / (float)n);
    }
     
    
    public static void main(String[] args)
    {
        
        int processes[] = { 1, 2, 3};
        int n = processes.length;
      
        
        int burst_time[] = {10, 5, 8};
      
        
        int quantum = 2;
        findavgTime(processes, n, burst_time, quantum);
    }
}

//======================================================================