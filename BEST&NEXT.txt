import java.util.Arrays;

public class best_Fit {
	
	void bestFit(int blockSize[] , int m , int processSize[] , int n) {
		
		int allocation[] = new int[n];
		
		Arrays.fill(allocation, -1);
		
		
		for(int i = 0; i < n ; i++) {
			int bstIdx = -1;
			
			for(int j = 0 ; i< m ; j++) {
				
				if(blockSize[j] >= processSize[i]) {
					
					if(bstIdx == -1) {
						bstIdx = j;
					}
					else if(blockSize[bstIdx]> blockSize[j]) {
						bstIdx = j;				
					}
					
				}
			}
			
			//current process allocation
			if(bstIdx != -1) {
				allocation[i] = bstIdx;
				blockSize[bstIdx] -= processSize[i];
			}
		}
		
		System.out.println();
		System.out.println("/nProcess NO. /tProcess Size /t BLock No");
		for(int i = 0 ; i < n ; i++) {
			System.out.println("/n" + (i+1) +"\t\t"+ processSize[i] + "\t\t" +(allocation[i]+1));
		}
		System.out.println();
		
		
		
	}

}
//==========================================================
import java.util.Arrays;

class NextFit {
    void nextFit(int blockSize[], int m, int processSize[], int n) {
        int allocation[] = new int[n];
        Arrays.fill(allocation, -1);
        int j = 0;

        for (int i = 0; i < n; i++) {
            int count = 0;
            while (count < m) {
                if (blockSize[j] >= processSize[i]) {
                    allocation[i] = j;
                    blockSize[j] -= processSize[i];
                    break;
                }
                j = (j + 1) % m;
                count++;
            }
        }

        System.out.println("\nProcess No.\tProcess Size\tBlock no.");
        for (int i = 0; i < n; i++) {
            System.out.print(i + 1 + "\t\t" + processSize[i] + "\t\t");
            if (allocation[i] != -1) {
                System.out.print(allocation[i] + 1);
            } else {
                System.out.print("Not Allocated");
            }
            System.out.println();
        }
    }
	public static void main(String[] args) {
        NextFit nextFit = new NextFit();
        int blockSize[] = {100, 500, 200, 300, 600};
        int processSize[] = {212, 417, 112, 426};
        int m = blockSize.length;
        int n = processSize.length;

        nextFit.nextFit(blockSize, m, processSize, n);
    }
}
//==============================================================
